a <- c(140, 138, 150, 148, 135)
b <- c(132, 135, 151, 146, 130)
t.test(a, b, alternative = "two.sided", paired=F)
a <- c(140, 138, 150, 148, 135)
b <- c(138, 136, 148, 146, 133)
t.test(a, b, alternative = "two.sided", paired = T)
pt(-2, df=4, lower.tail=T)
pt(2, df=4, lower.tail=T)
t.test(new, old, paired=T)
exp(.281)
t.test(New, Old, paired=T)
?t.test
t.test(new, old, alternative=c("less"), paired= TRUE)
qnorm(.95)
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
spsq <- ( (n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2)
t=(x1-x2)/(spsq*sqrt(1/n1 + 1/n2))
2*pt(t,n1+n2-2)
pt(t,n1+n2-2)
library(devtools)
library("devtools")
library("tools", lib.loc="/usr/lib/R/library")
library("devtools")
library(devtools)
install.packages("manipulate")
install.packages("devtools")
install.packages("git2r")
install.packages("git2r")
install.packages("devtools")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("rCharts")
install_github('ramnathv/rCharts')
require(rCharts)
haireye=as.data.frame(HairEyeColor)
n1 <- nPlot(Freq~Hair, group='Eye', type='multiBarChart', data=subset(haireye, Sex=='Male'))
n1
install.packages("manipulate")
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Male'))
n1
nPlot
mPlot
rPlot
detach("package:rCharts", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
?rPlot
library("rCharts", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
names(iris) = gsub('\\.', '', names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, type = 'point', color = 'Species')
library(datasets)
names(iris) = gsub('\\.', '', names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, type = 'point', color = 'Species')
require(rCharts)
names(iris) = gsub('\\.', '', names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, type = 'point', color = 'Species')
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("utils", lib.loc="/usr/lib/R/library")
library("rCharts", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
names(iris) = gsub('\\.', '', names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, type = 'point', color = 'Species')
require(rCharts)
haireye=as.data.frame(HairEyeColor)
?nPlot
??nPlot
require(rCharts)
str(haireye)
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("formatR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("htmltools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("manipulate", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("R.oo", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("RCurl", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("rstudio", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("UsingR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("codetools", lib.loc="/usr/lib/R/library")
library("tools", lib.loc="/usr/lib/R/library")
n1<- nPlot(Freq ~ Hair, group = 'Eye', type= 'multiBarChart', data = subset(haireye, Sex == 'Male'))
n1
str(haireye)
n1$save('fig/n1.html', cdn = TRUE)
require(rCharts)
names(iris) = gsub('\\.', '', names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, type = 'point', color = 'Species')
haireye=as.data.frame(HairEyeColor)
nPlot(Freq~Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male'))
rPlot(mpg~wt |am +vs, data=mtcars, type="point", color="gear")
nPlot(Freq~Hair, group = 'Eye', type = 'multiBarChart',
data = subset(hair_eye, Sex == 'Male'))
nPlot(Freq~Hair | Eye, color= "Eye", type = 'bar', data = hair_eye)
nPlot(Freq~Hair | Eye, color= "Eye", type = 'bar', data = haireye)
rPlot(Freq~Hair | Eye, color= "Eye", type = 'bar', data = haireye)
rPlot(Freq~Hair, group = 'Eye', type = 'multiBarChart',
data = subset(hair_eye, Sex == 'Male'))
rPlot(Freq~Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male'))
data(economics, package="ggplot2")
econ <- transform(economics, data=as.character(date))
m1 <- mPlot(x="date", y=c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$save('fig/m1.html', cdn=TRUE)
cat('<iframe src="fig/m1.html' width=100%, height=600><iframe>')
m1
require(reshape2)
uspexp <- melt(USPersonalExpenditure)
names(uspexp)[1:2]=c("category", "year")
x1 <- xPlot(value~year, group="category", data=uspexp, type= "line-dotted" )
x1
head(uspexp)
head(econ)
?econ
?economics
nPlot(Freq~Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male'))
install.packages("googleVis")
library(googleVis)
suppressPackagesStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600,height=400))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600,height=400))
print(M, "chart")
print(M, 'chart')
plot(M)
install.packages("manipulate")
library("bitops", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("RCurl", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github('rstudio/shinyapps')
library("shiny", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
shinyapps::setAccountInfo(name='cheriecaf', token='D8DA41108E5E846A1224A8DB5A11127C', secret='Uhfg0Imj2XzbDjrcloJYs5uk19yeTHY9zgxUp34y')
?datasets
library(help="datasets")
?Nile
require(stats); require(graphics)
par(mfrow = c(2, 2))
plot(Nile)
acf(Nile)
pacf(Nile)
ar(Nile) # selects order 2
cpgram(ar(Nile)$resid)
par(mfrow = c(1, 1))
arima(Nile, c(2, 0, 0))
NileNA <- Nile
NileNA[c(21:40, 61:80)] <- NA
arima(NileNA, c(2, 0, 0))
plot(NileNA)
pred <-
predict(arima(window(NileNA, 1871, 1890), c(2, 0, 0)), n.ahead = 20)
lines(pred$pred, lty = 3, col = "red")
lines(pred$pred + 2*pred$se, lty = 2, col = "blue")
lines(pred$pred - 2*pred$se, lty = 2, col = "blue")
pred <-
predict(arima(window(NileNA, 1871, 1930), c(2, 0, 0)), n.ahead = 20)
lines(pred$pred, lty = 3, col = "red")
lines(pred$pred + 2*pred$se, lty = 2, col = "blue")
lines(pred$pred - 2*pred$se, lty = 2, col = "blue")
par(mfrow = c(3, 1))
plot(Nile)
## local level model
(fit <- StructTS(Nile, type = "level"))
lines(fitted(fit), lty = 2)              # contemporaneous smoothing
lines(tsSmooth(fit), lty = 2, col = 4)   # fixed-interval smoothing
plot(residuals(fit)); abline(h = 0, lty = 3)
## local trend model
(fit2 <- StructTS(Nile, type = "trend")) ## constant trend fitted
pred <- predict(fit, n.ahead = 30)
## with 50% confidence interval
ts.plot(Nile, pred$pred,
pred$pred + 0.67*pred$se, pred$pred -0.67*pred$se)
plot(NileNA)
(fit3 <- StructTS(NileNA, type = "level"))
lines(fitted(fit3), lty = 2)
lines(tsSmooth(fit3), lty = 3)
plot(residuals(fit3)); abline(h = 0, lty = 3)
?euro
cbind(euro)
euro == signif(euro, 6) # [6 digit precision in Euro's definition]
all(euro.cross == outer(1/euro, euro))
?euro.cross
require(graphics)
dotchart(euro,
main = "euro data: 1 Euro in currency unit")
dotchart(1/euro,
main = "euro data: 1 currency unit in Euros")
dotchart(log(euro, 10),
main = "euro data: log10(1 Euro in currency unit)")
?attitude
require(stats); require(graphics)
pairs(attitude, main = "attitude data")
summary(attitude)
summary(fm1 <- lm(rating ~ ., data = attitude))
opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0),
mar = c(4.1, 4.1, 2.1, 1.1))
plot(fm1)
summary(fm2 <- lm(rating ~ complaints, data = attitude))
plot(fm2)
par(opar)
bl <- c(140,138,150,148,135)
wk2<- bl-2
diff <- wk2 - bl
n <- sum(!is.na(diff))
mn <- mean(diff)
s <- sd(diff)
testStat<- sqrt(n*mn/s)
t.test(diff)
t.test(wk2, bl, paired=FALSE)
pexp(6,1/5,lower.tail=FALSE)
n=100
mu=10
mu1=12
s=4
z<- (12-10)/(4/10)
z
10+4*4/10
bl
wk<- c(132,135,151,146,130)
wk
t.test(wk, bl, paired=TRUE)
1100+c(-1,1)*qt(.975,df=8)*30/sqrt(9)
4+c(-1,1)*qt(.975, 99)*0.5/sqrt(100)
6+c(-1,1)*qt(.975, 99)*2/sqrt(100)
d<-(1.5^2/9+1.8^2/9)^2/(1.5^2/8+1.8^2/8)
d
d<-(1.5^2/9+1.8^2/9)^2/((1.5^2/8)+(1.8^2/8))
d
d<-(1.5^2)*8+(1.8^2)*8)^2/16
d<-((1.5^2)*8+(1.8^2)*8))/16
d<-((1.5^2)*8+(1.8^2)*8)/16
d
md<- -3-1
md+c(-1,1)*qt(.975, 16)*d*sqrt(1/9+1/9)
t<-md+c(-1,1)*qt(.975, 16)*d*sqrt(1/9+1/9)
2*pt(t,,d,lower.tail=FALSE)
2*pt(t,d,lower.tail=FALSE)
t
t<-md+c(-1,1)*qt(.95, 16)*d*sqrt(1/9+1/9)
t
d<-sqrt(((1.5^2)*8+(1.8^2)*8)/16))
d<-sqrt(((1.5^2)*8+(1.8^2)*8)/16)
d
t<-md+c(-1,1)*qt(.975, 16)*d*sqrt(1/9+1/9)
t
2*pt(t,d,lower.tail=FALSE
)
md=11-4
sp<- sqrt((15*20^2+15*28^2)/(16+16-2)
)
semd <- sp *sqrt(1/16+1/16)
md+c(-1,1)*qt(.975, 16+16-2)*semd
t<-md+c(-1,1)*qt(.975, 16+16-2)*semd
2*pt(t, sp, lower.tail=FALSE)
p <- power.t.test(n=100, delta=0.01, sd=0.04, type="one.sample", alt="one.sided")$power
p
rm(list=ls)
rm(list=ls())
md <- 11-4
diff <- 11-4
md <- mean(diff)
n1 =n2 =16
ap<- sqrt(((n1-1)*20^2+(n2-1)*28^2)/(n1+n2-2))
semd<- ap*sqrt(1/n1+1/n2-2)
semd<- ap*sqrt(1/n1+1/n2)
md+c(-1,1)*qt*(0.975,n1+n2-2)*semd
md+c(-1,1)*qt*(0.975, n1+n2-2)*semd
md+c(-1,1)*qt*(0.975, 16+16-2)*semd
md+c(-1,1)*qt*(.975, 16+16-2)*semd
md+c(-1,1)*qt(.975, 16+16-2)*semd
t<-md+c(-1,1)*qt(.975, 16+16-2)*semd
2*pt(t, n1+n2-2, lower.tail=FALSE)
2*pt(t, n1-1, lower.tail=FALSE)
t<-md+c(-1,1)*qt(.975, 16-1)*semd
t
2*pt(t, n1-1, lower.tail=FALSE)
2*pt(t[1], n1-1, lower.tail=FALSE)
t[1]
2*pt(t[1], n1+n2-2, lower.tail=FALSE)
md/(20/sqrt(16))
sqrt(16)*md/20
2*pt(sqrt(16)*md/20,15,lower.tail=FALSE
)
diff <- -3-1
n1=n2=9
md=mean(diff)
sp<-sqrt(((n1-1)*1.5^2+(n2-1)*1.8^2)/(n1+n2-2)
)
semd<-sp*sqrt(1/n1+1/n2)
t=md+c(-1,1*qt*.975, n1+n2-2)*semd
t<-md+c(-1,1)*qt(.975, n1+n2-2)*semd
t
2*pt(t[1], n1+n2-2, lower.tail=FALSE)
2*pt(t[1], n1+n2-2, lower.tail=TRUE)
pt(t[1], n1+n2-2, lower.tail=TRUE)
z<- (44-42.04)/12/sqrt(288)
2*pt(z, 288-1, lower.tail=FALSE)
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
s <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2)/(n1 + n2 - 2))
(x1 - x2)/(s * sqrt(1/n1 + 1/n2))
qt(((x1 - x2)/(s * sqrt(1/n1 + 1/n2)))/2,n1+n2-2)
qt(.0275,n1+n2-2)
n1 <- n2 <- 16
d1 <- 11
d2 <- 4
s1 <- 20
s2 <- 28
## can just take the average because the sample sizes are the same
sp <- sqrt((s1^2 + s2^2)/2)
se <- sp * sqrt(1/n1 + 1/n2)
ts <- (d2 - d1)/se
2 * pt(ts, df = (n1 + n2 - 2))
pnorm(1.96, mean = 2, sd = 1)
pnorm(-1.96, mean = 2, sd = 1)
?pbinom
pbinom(7,8,0.5, lower.tail=FALSE)
pbinom(7,8,0.5)
pbinom(6,8,0.5,lower.tail=FALSE)
qnorm(.95)
pnorm(1.645)
pnorm(2)
pnorm(3.1)
pbinom(10,20,0.1,lower.tail=FALSE)
binom.test(11,20,.1,alt="greater")
sqrt(1/45+1/21+1/15+1/52)
pbinom(2,4,lower.tail=FALSE)
?pbinom
pbinom(2,4,0.5,#lower.tail=FALSE)
pbinom(2,4,0.5,lower.tail=FALSE)
4/1.25
4/5.25
1/5.25
1.25/5.25
85/200
p1=45/(45+15)
p2=(21/(21+52))
p=(45+21)/(45+15+21+52)
rr=p1/p2
n1=45+15
n2=21+52
sqrt((1-p1)/p1*n1+(1-p2)/p2*n2)
sqrt((1-p1)/(p1*n1)+(1-p2)/(p2*n2)
)
sqrt((1-p1)/(p1*n1)+(1-p2)/(p2*n1))
n1=45+21
n2=15+52
p1=45/n1
p2=15/n2
sqrt((1-p1)/(p1*n1)+(1-p2)/(p2*n1))
pbinom(2,4,0.5)
pbinom(2,4,0.5,lower.tail=FALSE)
?binom.test
binom.test(3,4,0.5,alt=c("two.sided"))
p1 <- 0.7
p2 <- 0.15
p <- 85/200
ts <- (p1 - p2)/sqrt(p * (1 - p) * 2/100)
ts
pt(ts)
pt(ts,199)
pt(ts,1)
10^-3
10^-5
4*10_15
4*10^-15
p1 <- 0.7
p2 <- 0.15
p <- 85/200
ts <- (p1 - p2)/sqrt(p * (1 - p) * 2/100)
ts
pnorm(ts,99)
pnorm(ts,199)
pnorm(ts,199,lower.tail=FALSE)
pnorm(ts,99,lower.tail=FALSE)
pt(ts,99,lower.tail=FALSE)
pt(ts,199,lower.tail=FALSE)
1/45+1/21+1/15+1/52
n1=45+21
n2=15+52
p1=45/n1
p2=15/n2
sqrt((1-p1)/p1*n1+(1-p2)/p2*n2)
sqrt((1-p1)/(p1*n1)+(1-p2)/(p2*n2))
pbinom(2,4,0.5, lower.tail=FALSE)
sqrt(1/45+1/21+1/15+1/52)
pt(p,199,lower.tail=FALSE)
p
p=85/200
p
sqrt((1-p1)/(p1*n1)+(1-p2)/(p2*n2))
p
pt(p,199,lower.tail=FALSE)
exp(pt(p,199,lower.tail=FALSE))
log(pt(p,199,lower.tail=FALSE))
ts
pt(ts, 199,lower.tail=FALSE)
2*pt(ts, 199,lower.tail=FALSE)
exp(2*pt(ts, 199,lower.tail=FALSE))
log(2*pt(ts, 199,lower.tail=FALSE))
2*pt(85/200, 199, lower.tail=TRUE)
pt(85/200, 199, lower.tail=TRUE)
pt(85/200, 199, lower.tail=FALSE)
ts
pt(ts, 199,lower.tail=TRUE)
pt(ts, 199,lower.tail=FALSE)
exp(pt(ts, 199,lower.tail=FALSE))
log(pt(ts, 199,lower.tail=FALSE))
install.packages("SmarterPoland")
library(SmarterPoland)
tmp <- getEurostatRCV("teicp270")
summary(tmp)
head(tmp)
View(tmp)
tmp <- tmp[complete.cases(tmp),]
str(tmp)
p <- ggplot(tmp, aes(x=time, y=value, group=geo, colour=geo))
p <- p + geom_line() + facet_wrap(~geo, nrow=6) + theme(legend.position="none")
p <- p + geom_smooth(linetype="dotted", col="black")
p
y <- tmp[geo=="AT"m]
y <- tmp[geo=="AT",]
y <- tmp[tmp$geo=="AT",]
y
library(dplyr)
z<- filter(tmp, unit=="I2010_NSA")
head(z)
tail(z)
p <- ggplot(z, aes(x=time, y=value, group=geo, colour=geo))
p <- p + geom_line() + facet_wrap(~geo, nrow=6) + theme(legend.position="none")
p <- p + geom_smooth(linetype="dotted", col="black")
p
y <- z[z$geo=="AT",]
p <- ggplot(y, aes(x=time, y=value, group=geo, colour=geo))
p <- p + geom_line() + facet_wrap(~geo, nrow=6) + theme(legend.position="none")
p <- p + geom_smooth(linetype="dotted", col="black")
p
?method
?geom_smooth
setwd("~/Documents/datasciencecoursera/HPI/HPIapp")
runApp()
library(shiny)
runApp()
runApp()
runApp()
rownames(z)
unique(z$geo)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
countries<- unique(z$geo)
countries[[2]]
countries[,2]
runApp()
runApp()
runApp()
?shiny
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
str(z)
z$geo <- as.character(z$geo)
str(z)
runApp()
system.file("examples", package="shiny")
runExample("01_hello") # a histogram
runExample("01_hello") # a histogram
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("06_tabsets") # tabbed panels
runExample("09_upload") # file upload wizard
h1("My title")
uk
y
?lm
yLM <- lm(value~time, data=y)
yLM
shinyapps::setAccountInfo(name='cheriecaf',
token='D8DA41108E5E846A1224A8DB5A11127C',
secret='<SECRET>')
shinyapps::setAccountInfo(name='cheriecaf', token='D8DA41108E5E846A1224A8DB5A11127C', secret='Uhfg0Imj2XzbDjrcloJYs5uk19yeTHY9zgxUp34y')
getwd()
deployApp()
library(shiny)
shinyapps::setAccountInfo(name='cheriecaf', token='081FE0B2CDC636D664C619061B6F25F3', secret='U2HL08YIsinhUlacJx4OW3enzxTpFhe9FSFuXbNZ')
deployApp()
getwd()
?deployApp
deployApp()
deployApp("HPIapp")
